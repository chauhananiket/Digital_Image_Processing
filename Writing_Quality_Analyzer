{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Writing_Quality_Analyzer","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"erOi_cFBNqgA"},"source":["# Import required libraries\n","import numpy as np \n","import cv2\n","import matplotlib.pyplot as plt  \n","import imageio\n","from PIL import Image\n","import numpy as np\n","import random as rand\n","import imageio\n","from PIL import Image\n","from skimage.morphology import skeletonize\n","from skimage.util import invert\n","import math\n","from queue import LifoQueue\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MoRGgBT1fGjJ"},"source":["# Plot the image\n","\n","def img_plot(im):\n","  plt.figure(figsize=(6,6))\n","  plt.imshow(im,cmap='gray')\n","  plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"s1aYjtgETurW","executionInfo":{"status":"ok","timestamp":1608034778253,"user_tz":-330,"elapsed":1511,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"ced50bd9-d602-4304-9fd5-23434dda8357"},"source":["# Generate the lines as the need\n","\n","def jerky_line(pen_width):\n","    filename = 'jerky_line'\n","    ext = '.jpg'\n","\n","    img_width, img_height = 256, 256\n","    out = np.full(shape=(img_width, img_height), fill_value=255, dtype=np.dtype('int32'))\n","\n","    i = int(img_height / 2)\n","    baseline = i\n","    j = 16\n","    while j < 240:\n","\n","        k = 0\n","        while k < pen_width:\n","            out[i - k, j] = 0\n","            k = k + 1\n","\n","        if (i >= baseline - 1) and (i <= baseline + 1):\n","            i = i + rand.randint(-1, 1)\n","        elif i == baseline - 2:\n","            i = i + rand.randint(0, 1)\n","        elif i == baseline + 2:\n","            i = i + rand.randint(-1, 0)\n","\n","        j = j + 1\n","    img = out    \n","    \n","    #img = Image.fromarray(out.astype(np.uint8))\n","    #img.save(filename + '_' + str(pen_width) + '.jpg')\n","    \n","    return img\n","\n","\n","def slanted_line(pen_width):\n","    filename = 'slanted_line'\n","    ext = '.jpg'\n","\n","    img_width, img_height = 256, 256\n","    out = np.full(shape=(img_width, img_height), fill_value=255, dtype=np.dtype('int32'))\n","\n","    i = int(img_height / 2)\n","    j = 16\n","    while j < 240:\n","        k = 0\n","        while k < pen_width:\n","            out[i - k, j] = 0\n","            k = k + 1\n","\n","        if j % 2 == 0:\n","            i = i - 1\n","\n","        j = j + 1\n","\n","    img = out\n","    #img = Image.fromarray(out.astype(np.uint8))\n","    #img.save(filename + '_' + str(pen_width) + '.jpg')\n","    \n","    return img\n","\n","\n","def straight_line(pen_width):\n","    filename = 'straight_line'\n","    ext = '.jpg'\n","\n","    img_width, img_height = 256, 256\n","    out = np.full(shape=(img_width, img_height), fill_value=255, dtype=np.dtype('int32'))\n","\n","    i = int(img_height / 2)\n","    j = 16\n","    while j < 240:\n","        k = 0\n","        while k < pen_width:\n","            out[i - k, j] = 0\n","            k = k + 1\n","\n","        j = j + 1\n","\n","    img = out\n","\n","    #img = Image.fromarray(out.astype(np.uint8))\n","    #img.save(filename + '_' + str(pen_width) + '.jpg')\n","    \n","    return img\n","\n","def go():\n","    \n","    pen_width = 1\n","    jer = jerky_line(pen_width)\n","    dot = straight_line(pen_width)\n","    slan = slanted_line(pen_width)\n","\n","    return jer,dot,slan\n","\n","\n","jer,dot,slan = go()\n","img_plot(jer)\n","img_plot(slan)\n","img_plot(dot)\n","\n","# path = '/content/drive/MyDrive/Projects/DIP_Assignments/Test_Images/Slanted_Line.JPG'\n","# slan = cv2.imread(path,cv2.IMREAD_GRAYSCALE)\n","# slan = np.where(slan==255,1,0)\n","# img_plot(slan)\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"mTtCJyuyuM_i"},"source":["# Detect jerky using distance measure\n","\n","def threshold_image(image):\n","    h, w = image.shape\n","\n","    i, j = 0, 0\n","    while i < h:\n","        while j < w:\n","            if image[i, j] < 128:\n","                image[i, j] = 0\n","            else:\n","                image[i, j] = 255\n","\n","            j = j + 1\n","\n","        j = 0\n","        i = i + 1\n","\n","    return image\n","\n","def detectjerky(line):\n","    h, w = line.shape\n","    i = int(h / 2)\n","    j = 16\n","\n","    weights = []\n","\n","    while j < 240:\n","\n","        w = 0\n","        if line[i, j] == 0:   # Black pixel at the baseline\n","\n","            search_bound = 10   # How many pixels below/above the baseline should we look for a black pixel?\n","\n","            upper_error = 0\n","            k = 1\n","            while line[i - k, j] == 0 and k <= search_bound:\n","                upper_error = upper_error + 1\n","                k = k + 1\n","\n","            lower_error = 0\n","            k = 1\n","            while line[i + k, j] == 0 and k <= search_bound:\n","                lower_error = lower_error + 1\n","                k = k + 1\n","\n","            if upper_error <= 3 and lower_error <= 3:\n","                w = 1\n","\n","        elif line[i, j] == 255:  # White pixel at the base line\n","\n","            search_bound = 3    # How many pixels below/above the baseline should we look for a black pixel?\n","            width_bound = 3     # What should be the width of that black pixel once we encounter it?\n","\n","            # Search above the base line\n","            black_found = 0\n","            k = 1\n","            while line[i - k, j] == 255 and k <= search_bound:\n","                k = k + 1\n","\n","            if k <= search_bound:   # Found black pixel within search_bound pixels above base line\n","                black_found = 1\n","\n","                width = 1\n","                l = 1\n","                while line[i - k - l, j] == 0:\n","                    width = width + 1\n","                    l = l + 1\n","\n","                # If the width of the pixel within the accepted width_bound, give some weight\n","                if width <= width_bound:\n","                    w = 0.5\n","\n","            # Search below the base line\n","            if black_found == 0:\n","                k = 1\n","                while line[i + k, j] == 255 and k <= search_bound:\n","                    k = k + 1\n","\n","                if k <= search_bound:  # Found black pixel within search_bound pixels below base line\n","                    width = 1\n","                    l = 1\n","                    while line[i + k + l, j] == 0:\n","                        width = width + 1\n","                        l = l + 1\n","\n","                    # If the width of the pixel within the accepted width_bound, give some weight\n","                    if width <= width_bound:\n","                        w = 0.5\n","\n","        weights.append(w)\n","        j = j + 1\n","\n","    print(weights)\n","    total_weight = np.array(weights).sum()\n","    average_weight = total_weight / 224\n","    print(total_weight)\n","    print(average_weight)\n","    if average_weight > 0.5:\n","        print(\"Line drawn correctly!\")\n","    else:\n","        print(\"Incorrect drawing.\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EZWZw4hiei8t","executionInfo":{"status":"ok","timestamp":1608034746855,"user_tz":-330,"elapsed":1244,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"efe95ccd-ae8e-4f3a-e3d9-6840b0e7397c"},"source":["detectjerky(dot)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","224\n","1.0\n","Line drawn correctly!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"scczI7abejtu","executionInfo":{"status":"ok","timestamp":1608034748400,"user_tz":-330,"elapsed":787,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"d2423de8-8fb9-4324-b66e-204f0741a78b"},"source":["detectjerky(jer)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 0.5, 1, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 1, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 0.5, 0.5, 1, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 1, 0.5, 0.5, 1, 1, 0.5, 1, 1, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 1, 0.5, 0.5, 1, 0.5, 1, 1, 0.5, 1, 1, 0.5, 1, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n","144.5\n","0.6450892857142857\n","Line drawn correctly!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jpC6ot6Jejqu","executionInfo":{"status":"ok","timestamp":1608034752102,"user_tz":-330,"elapsed":1204,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"71fdc885-056a-4aee-fc62-a19613db3aa4"},"source":["detectjerky(slan)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","4.0\n","0.017857142857142856\n","Incorrect drawing.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2YFXmaIzejns"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PSnQS7FZuiZS"},"source":["# Detect jerky using gradient method\n","\n","def detectjerky_gradient(image,step=1):\n","    # Invert the image\n","    image = np.where(image == 0, 1, 0)\n","\n","    # perform skeletonization\n","    skel = skeletonize(image)\n","\n","    # inverted = np.where(skel == 1, 255, 0)\n","    # inverted_img = Image.fromarray(inverted.astype(np.uint8))\n","    # inverted_img.save(filename + '_inverted.png')\n","    # img_plot(skel)\n","\n","    # Get index of first pixel form left end\n","    ind = np.nonzero(skel)\n","\n","    xcorr = list(ind[1])\n","    ycorr = list(ind[0])\n","    xmin = min(xcorr)   # Unique when drawing from left to right, leftmost point in this case, otherwise gives a random left most point\n","    ymin = ycorr[xcorr.index(xmin)]\n","    index = [xmin, ymin]    # (x,y) of the left most element with the axes origin at top left corner, to index this point in the image, do image[ymin, xmin]\n","   # print(index)\n","\n","    grad = []\n","    x = index[0]\n","    y = index[1]\n","\n","    visited = np.zeros(shape=(256, 256))\n","    step = step  # After how many steps should the gradient be sampled?\n","    c = 0\n","\n","    stack = LifoQueue()\n","    s = ([x, y], [-1, -1])\n","    stack.put(s)\n","    count_visits = 0\n","    while not stack.empty():\n","        count_visits = count_visits + 1\n","\n","        t = stack.get()\n","        x = t[0][0]\n","        y = t[0][1]\n","        xp = t[1][0]\n","        yp = t[1][1]\n","\n","        if c % step == 0:\n","            if xp != -1 and yp != -1:\n","                if (x - xp) != 0:\n","                    mag = abs((y - yp) / (x - xp))\n","                   # print(str(mag) + \" = (\" + str(x) + \", \" + str(y) + \")\")\n","                    grad.append(mag)\n","                elif (y - yp) != 0:\n","                    mag = abs((x - xp) / (y - yp))\n","                   # print(str(mag) + \" = (\" + str(x) + \", \" + str(y) + \")\")\n","                    grad.append(mag)\n","\n","            c = c + 1\n","\n","        visited[y, x] = 1\n","        if skel[y, x + 1] == 1 and visited[y, x + 1] == 0:  # right\n","            u = ([x + 1, y], [x, y])\n","            stack.put(u)\n","        if skel[y, x - 1] == 1 and visited[y, x - 1] == 0:  # left\n","            u = ([x - 1, y], [x, y])\n","            stack.put(u)\n","        if skel[y - 1, x] == 1 and visited[y - 1, x] == 0:  # top\n","            u = ([x, y - 1], [x, y])\n","            stack.put(u)\n","        if skel[y + 1, x] == 1 and visited[y + 1, x] == 0:  # bottom\n","            u = ([x, y + 1], [x, y])\n","            stack.put(u)\n","\n","        if skel[y - 1, x + 1] == 1 and visited[y - 1, x + 1] == 0:  # top right\n","            u = ([x + 1, y - 1], [x, y])\n","            stack.put(u)\n","        if skel[y - 1, x - 1] == 1 and visited[y - 1, x - 1] == 0:  # top left\n","            u = ([x - 1, y - 1], [x, y])\n","            stack.put(u)\n","        if skel[y + 1, x + 1] == 1 and visited[y + 1, x + 1] == 0:  # bottom right\n","            u = ([x + 1, y + 1], [x, y])\n","            stack.put(u)\n","        if skel[y + 1, x - 1] == 1 and visited[y + 1, x - 1] == 0:  # bottom left\n","            u = ([x - 1, y + 1], [x, y])\n","            stack.put(u)\n","\n","    change_grad = 0\n","    for i in range(1, len(grad), 1):\n","        if grad[i] - grad[i - 1] != 0:\n","            change_grad = change_grad + 1\n","\n","    print(change_grad)\n","    print(count_visits)\n","    print(str(change_grad / count_visits))\n","\n","\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EGTrjoBPAiJe","executionInfo":{"status":"ok","timestamp":1608034050530,"user_tz":-330,"elapsed":1631,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"f13f4c72-efb5-417c-c43d-ce71f94a5600"},"source":["detectjerky_gradient(jer)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["110\n","224\n","0.49107142857142855\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hoCzNAgNAknl","executionInfo":{"status":"ok","timestamp":1608034292515,"user_tz":-330,"elapsed":1238,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"08b5b9fe-921a-4996-f0f1-886cbff5baae"},"source":["grad = detectjerky_gradient(slan,step = 2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\n","224\n","0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qZdefWopBqe-","executionInfo":{"status":"ok","timestamp":1608034243540,"user_tz":-330,"elapsed":1190,"user":{"displayName":"Aniket Chauhan","photoUrl":"","userId":"11893733794973168978"}},"outputId":"b3bc4cd0-234e-4d08-fa28-094052d9c99c"},"source":["grad = detectjerky_gradient(dot)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\n","224\n","0.0\n"],"name":"stdout"}]}]}